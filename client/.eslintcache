[{"C:\\Users\\brian\\breakdown_\\client\\src\\index.js":"1","C:\\Users\\brian\\breakdown_\\client\\src\\App.js":"2","C:\\Users\\brian\\breakdown_\\client\\src\\reportWebVitals.js":"3","C:\\Users\\brian\\breakdown_\\client\\src\\components\\Genny\\index.js":"4","C:\\Users\\brian\\breakdown_\\client\\src\\components\\Searchbar\\index.js":"5","C:\\Users\\brian\\breakdown_\\client\\src\\components\\Results\\index.js":"6","C:\\Users\\brian\\breakdown_\\client\\src\\utils\\caller.js":"7","C:\\Users\\brian\\breakdown_\\client\\src\\utils\\sifter.js":"8","C:\\Users\\brian\\breakdown_\\client\\src\\components\\Checkbox\\index.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":1063,"mtime":1612215706237,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":1520,"mtime":1612215676640,"results":"14","hashOfConfig":"11"},{"size":2985,"mtime":1612221064187,"results":"15","hashOfConfig":"11"},{"size":9914,"mtime":1612215676717,"results":"16","hashOfConfig":"11"},{"size":986,"mtime":1612222747649,"results":"17","hashOfConfig":"11"},{"size":730,"mtime":1612221077843,"results":"18","hashOfConfig":"11"},{"size":360,"mtime":1612215676151,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1gcf1hu",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\brian\\breakdown_\\client\\src\\index.js",[],["41","42"],"C:\\Users\\brian\\breakdown_\\client\\src\\App.js",[],"C:\\Users\\brian\\breakdown_\\client\\src\\reportWebVitals.js",[],"C:\\Users\\brian\\breakdown_\\client\\src\\components\\Genny\\index.js",[],"C:\\Users\\brian\\breakdown_\\client\\src\\components\\Searchbar\\index.js",[],"C:\\Users\\brian\\breakdown_\\client\\src\\components\\Results\\index.js",["43"],"import React, { Component } from \"react\";\r\nimport './results.css';\r\nimport Searchbar from '../Searchbar';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport Checkbox from '../Checkbox';\r\nimport _axios from '../../utils/caller';\r\n\r\nclass Results extends Component {\r\n\r\n    state = {\r\n        loaded: false,\r\n        preview: '',\r\n        artistImage: '',\r\n        checkboxes: {},\r\n        checksLoaded: false,\r\n        topGenres: '',\r\n        recommendations: []\r\n    }\r\n\r\n    chartData = {\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'Genre Breakdown',\r\n                backgroundColor: ['rgb(39, 118, 80)', 'rgb(41, 82, 109)', 'rgb(51, 54, 118)', 'rgb(151, 50, 82)', 'rgb(170, 88, 57)',\r\n                'rgb(170, 121, 57)', 'rgb(88, 42, 114)', 'rgb(136, 45, 96)','rgb(78, 146, 49)','rgb(136, 162, 54)'\r\n                ],\r\n                data: [20, 30, 50],\r\n            }\r\n        ]\r\n    };\r\n\r\n    chartLegend = {\r\n        labels: {\r\n            fontColor: 'rgb(255, 255, 255)'\r\n        }\r\n    };\r\n\r\n    chartReference = {};\r\n\r\n    cleanData = () => {\r\n\r\n        this.setState({topGenres: this.props.topGenres}, async() => {\r\n\r\n            this.setState({loaded: false});\r\n\r\n            this.chartData.labels = [];\r\n            this.chartData.datasets[0].data = [];\r\n\r\n            let tempGenrePopularity = [];\r\n\r\n            for (let i = 0; i < 5; i++) {\r\n                this.chartData.labels.push(this.state.topGenres[i].genre.toLowerCase());\r\n                tempGenrePopularity.push(this.state.topGenres[i].count);\r\n            }\r\n\r\n            let reduced = tempGenrePopularity.reduce((a, b) => a + b)\r\n\r\n            // adjusted popularity values to %'s of 100\r\n            this.chartData.datasets[0].data = tempGenrePopularity.map(value => Math.round((value / reduced) * 100));\r\n\r\n            this.setState({artistImage: this.props.topTracksAndRecommendations.image});\r\n\r\n            this.props.handleGlobalState('okLoad', false);\r\n            this.setState({loaded: true});\r\n\r\n            this.topsRenderer('topTracks');\r\n            this.topsRenderer('recommendations');\r\n\r\n            this.recommendBoxes();\r\n        });\r\n\r\n    };\r\n\r\n    toppers = [];\r\n    tempRecommendations = [];\r\n\r\n    setPreview = (e) => {\r\n        this.setState({preview: e.target.dataset.preview});\r\n        // this.setState({active: e.target.dataset.preview});\r\n        // console.log(this.state.preview, this.state.active);\r\n    };\r\n\r\n    topsRenderer = (whatRender) => {\r\n\r\n        let rank = 0;\r\n        if (whatRender === 'topTracks') {\r\n            this.toppers = [];\r\n            this.setState({preview: this.props.topTracksAndRecommendations[whatRender][0].previewURI});\r\n        } else {\r\n            this.setState({recommendations: []});\r\n            this.tempRecommendations = [];\r\n        }\r\n\r\n        this.props.topTracksAndRecommendations[whatRender].forEach(elem => {\r\n            rank++;\r\n            let trackName = elem.trackName;\r\n            let preview = elem.previewURI;\r\n            let artist = elem.artist;\r\n            let image = elem.imageURI;\r\n            if (whatRender === 'topTracks') {\r\n                this.toppers.push(<li className={this.state.preview === this.state.active ? 'active' : ''} key={rank} id={rank} data-preview={preview} onClick={this.setPreview}><span className='rankNumber'>{rank}.</span> {trackName}</li>);\r\n            } else {\r\n                this.tempRecommendations.push(\r\n                <li\r\n                className={this.state.preview === this.state.active ? 'active' : ''} \r\n                key={preview} \r\n                id={preview}  \r\n                onClick={this.setPreview}>\r\n\r\n                    <div data-preview={preview} className='recommendationBox' style={{'backgroundImage': `url(\"${image}\")`}}>\r\n                        <div data-preview={preview} className='textbackdrop'>\r\n                            <h1 data-preview={preview}>{trackName}</h1>\r\n                            <h3 data-preview={preview}>{artist}</h3>\r\n                        </div>\r\n                    </div>\r\n\r\n                     \r\n                </li>);\r\n            }\r\n        });\r\n        console.log(this.tempRecommendations);\r\n        this.setState({recommendations: this.tempRecommendations});\r\n\r\n    };\r\n\r\n    recommendChecks = [];\r\n\r\n    recommendBoxes = () => {\r\n\r\n        let tempCheckboxState = {\r\n            [this.props.searchedArtist.toLowerCase()]: {\r\n                checked: true\r\n            }\r\n        }\r\n\r\n        this.chartData.labels.forEach(elem => {\r\n            tempCheckboxState[elem] = {\r\n                checked: true\r\n            }\r\n        });\r\n\r\n        this.setState({checkboxes: tempCheckboxState}, async () => {\r\n            this.renderCheckBoxes();\r\n        });\r\n    };\r\n\r\n    handleInputCheck = (e) => {\r\n\r\n        this.setState({checksLoaded: false});\r\n\r\n        this.setState(prevState => ({\r\n            checkboxes: {\r\n                ...prevState.checkboxes,\r\n                [e.target.name]: {\r\n                    checked: !prevState.checkboxes[e.target.name].checked\r\n                }\r\n            }\r\n        }), async () => {\r\n            this.recommendChecks = [];\r\n            this.renderCheckBoxes();\r\n        });\r\n    };\r\n\r\n    renderCheckBoxes = () => {\r\n        this.recommendChecks = [];\r\n\r\n        let key = 0;\r\n\r\n        this.recommendChecks.push(<Checkbox \r\n            onCheckboxChange={this.handleInputCheck} \r\n            key={this.props.searchedArtist.toLowerCase()+key} \r\n            name={this.props.searchedArtist.toLowerCase()} \r\n            checked={this.state.checkboxes[this.props.searchedArtist.toLowerCase()].checked}/>\r\n        );\r\n\r\n        key++;\r\n\r\n        this.chartData.labels.forEach(elem => {\r\n\r\n            this.recommendChecks.push(\r\n                <Checkbox onCheckboxChange={this.handleInputCheck} key={elem+key} name={elem} checked={this.state.checkboxes[elem].checked}/>\r\n            );\r\n\r\n            key++;\r\n        });\r\n\r\n        this.setState({checksLoaded: true});\r\n    };\r\n\r\n    callForMoreRecommendations = () => {\r\n\r\n        let tempQueries = Object.entries(this.state.checkboxes);\r\n\r\n        tempQueries.shift();\r\n        let tempGenresArray = [];\r\n\r\n        tempQueries.forEach(elem => {\r\n            const [name, value] = elem;\r\n            if (value.checked) {\r\n                tempGenresArray.push(name);\r\n            }\r\n        });\r\n\r\n        _axios.getRecoms([], tempGenresArray).then(res => {\r\n            this.props.handleGlobalState('topTracksAndRecommendations', res.data, this.topsRenderer('recommendations'));\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n    };\r\n\r\n    triggerModal = () => {\r\n        this.props.handleGlobalState('modalOpen', !this.props.modalOpen);\r\n    };\r\n    \r\n\r\n    componentDidUpdate() {\r\n        if (this.props.topGenres&&this.props.topTracksAndRecommendations&&this.props.okLoad) {\r\n            this.cleanData();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let titlePlayerImg = {\r\n            backgroundImage: `url(${this.state.artistImage})`\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <section className='resultsWrapper'>\r\n                \r\n            <div className='title-player' style={titlePlayerImg}>\r\n                <div className='title'>\r\n                    <p><span className='artistName'>{this.props.searchedArtist}</span></p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='resultsLoader'>\r\n                \r\n                <div className='topTracks'>\r\n                    <h1>Popular tracks</h1>\r\n                    <ul>\r\n                        {this.toppers}\r\n                    </ul>\r\n                </div>\r\n\r\n                <div className='genres'>\r\n                    <h1>Genre breakdown</h1>\r\n                    <div className='donutWrapper'>\r\n                        {!this.state.loaded ? \r\n                        <></>\r\n                        :\r\n                        <Doughnut\r\n                        ref={(reference) => this.chartReference = reference}\r\n                        data={this.chartData} \r\n                        legend={this.chartLegend}\r\n                        /> \r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='recommendations'>\r\n                    <ul>\r\n                        {this.state.recommendations}\r\n\r\n                        <div className='checkers'>\r\n                            {!this.state.checksLoaded ? \r\n                            <></>\r\n                            :\r\n                            this.recommendChecks\r\n                            }\r\n\r\n                            <div className='grabRecomsButton' onClick={this.callForMoreRecommendations}>\r\n                                get new recommendations\r\n                            </div>\r\n                        </div>\r\n\r\n                    </ul>\r\n\r\n                    <div className='player'>\r\n                        <iframe src={`https://open.spotify.com/embed/track/${this.state.preview}`} width=\"300\" height=\"70\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            </section>\r\n\r\n            <aside className={this.props.modalOpen === false ? 'searchButtonLow' : 'searchButtonHigh'}>\r\n                <span onClick={this.triggerModal}><a href='#top' title='search again?'><i className=\"fa fa-search\"></i></a></span>\r\n\r\n                <div className={this.props.modalOpen === false ? `searchModal hidden` : `searchModal shown`}>\r\n                    <Searchbar handleGlobalState={this.props.handleGlobalState} modalOpen={this.props.modalOpen} />\r\n                    {this.props.errMessage}\r\n                </div>\r\n\r\n            </aside>\r\n\r\n            </>\r\n        );\r\n\r\n    };\r\n};\r\n\r\nexport default Results;","C:\\Users\\brian\\breakdown_\\client\\src\\utils\\caller.js",["44","45"],"C:\\Users\\brian\\breakdown_\\client\\src\\utils\\sifter.js",[],"C:\\Users\\brian\\breakdown_\\client\\src\\components\\Checkbox\\index.js",[],["46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":283,"column":25,"nodeType":"54","endLine":283,"endColumn":189},{"ruleId":"55","severity":1,"message":"56","line":2,"column":8,"nodeType":"57","messageId":"58","endLine":2,"endColumn":13},{"ruleId":"59","severity":1,"message":"60","line":7,"column":1,"nodeType":"61","endLine":34,"endColumn":3},{"ruleId":"48","replacedBy":"62"},{"ruleId":"50","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-unused-vars","'_sift' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["64"],["65"],"no-global-assign","no-unsafe-negation"]